DONE

    # of servers per connect token increased from 16 to 32.

    Private connect token is now zero padded to 1024 bytes for consistency

    Connect token buffer size reduced from 4096 to 2048.

    Server should return maximum # of clients to client inside connect token. It's important for client to know that it is client X/Y.

    Fixed bug where client didn't store its client index! Wow. whoops.

    Reduced size of challenge token to 300 bytes. That's all that is needed.

    Removed the always 0 "reason" for connection denied. Pointless. There is only one reason :)

    Added some code on read connection payload packet to ignore packets with payload data size < 1. Otherwise, could have performed zero size allocation.

TODO
    
    There should be code on the server that kills any encryption mapping if it exceeds the timeout for the connection request token, and hasn't connected.

    Otherwise attackers can establish an encryption mapping with a connect token, and not proceed to connect, but keep draining server resources by spamming packets.

    Think through these possible attacks and make sure they are covered.

    Are these attacks actually worthwhile? I mean the only difference is that the packet will get decrypted, vs. ignored when it can't find an encryption mapping.

    I think adding this check is important, because the general idea is that I should always require a client to get a connect token to be able to send packets.

    So add the check, basically when receiving a packet, in the encryption mapping have both a) a timeout for no packets sent or received, but also b) a timeout against
    a global time (the connect token expiry time, or possibly, must connect within 5 seconds or whatever), that is cleared when the client successfully transitions to connected.

    This way a client can only exchange packets with the server for a limited time without successfully transitioning to connected.