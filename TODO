DONE

    Continue processing connection response.

    Server is now sending connection denied back to client, but client is not receiving this. Why not?

    Fixed so connection denied response is processed while in sending connection response state.

    Add data structures to look up client by id, address.

    Port across functions to look up client by id, address.

    Extend the code to ignore connection request / connection response if the client address or id is already connected.

    Work out what the next state is for clients on connection response.

    Does the client get fully connected, with a pending flag, so the client keeps sending the keep-alive until connection is confirmed.

    Or do I extend the server-side to have a state per-slot, eg. 

        CLIENT_SLOT_FREE
        CLIENT_SLOT_PENDING
        CLIENT_SLOT_CONNECTED

    Think over this for a while, because any deviation from how yojimbo does it needs to have a good reason.

    Decided to stick with the state structure from yojimbo. No good reason to deviate. Get it finished!

    Port across function to connect client

    Send a keep alive packet back to the client when the client is connected.

    Make sure the client completes connection to the server.

TODO

    Add data structure per-client slot for time last packet sent, time last packet received (for timeouts).

    Clear the last packet send and receive time on connect to the current time.

    Implement send packets function for server so that it sends a keep alive packet to the client if no packet sent in the last amount of time.

    Add a 'confirmed' flag per-client slot on the server. Clear it to 0 when a client slot is connected.

    Extend the keep alive so it is sent repeatedly, even if other packets are sent from server -> client prior to confirm.

    -----------------

    When the server receives packets and the packet is a keep alive or a payload packet, look up to see which client the packet belongs to.

    When either packet is received set the last time packet received to current server time.

    -----------------

    Implement server-side timeouts.

    -----------------

    When the server receives a payload packet, add that 

    -----------------

    Extend client_server to test that client and server can exchange payload packets.

    -----------------

    Implement code on the server-side to disconnect the client.

    -----------------

    Once client and server are connected, disconnect the client.

    =============================================================================

    Implement network simulator and shim for packets sent/received from client and server.

    -----------------

    Implement replay protection.

    -----------------

    Implement functional tests for client connect connection functionality.

    -----------------

    Bring across matcher in golang and port to binary format connect tokens.

    Integrate mbedtls library.

    Port across code for matcher. Keep it blocking. Doesn't matter for now.

    Convert client to get server info from web server.

    -----------------

    Implement stress that connects 256 clients.

    -----------------

    Write white paper.

    -----------------
