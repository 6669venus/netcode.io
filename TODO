DONE

    Sketched out netcode_socket_t

    Actually, I need to bring across some stuff to netcode_init for winsock, eg. the WSAStartup for windows.

    Port across socket create function (99%)

    Port across remainder of socket create function with address conversions.

    Hook up the client to create a socket.

    Client create function should be extended take port # before current time.

    If the client fails to create a socket, print an error and return NULL when creating the client.

TODO

    ------------------

    Port across send packet function.

    Port across receive packet function.

    ------------------

    Port across code on the client to receive packets from the client and process those packets.

    Make sure the process packet code is separate from the client receive packet loop, so it can be pumped from elsewhere (eg. packets coming in from simulator)

    ------------------

    Add code to send the other packet types.

    ------------------

    Work out a design for the client and how it waits for the connection confirm

    Basically, I think it works like this

    On the server, a 'pending' flag is set until the client replies with either a payload packet or a keep-alive packet.

    -----------------

    Port across the code to process packets.

    -----------------

    Implement the server side of the state machine (up to 256 players, for agar.io)

    -----------------

    Implement tests to make sure the client/server state machine is working as expected.

    -----------------

    Bring across matcher in golang and port to binary format connect tokens.

    Integrate mbedtls library.

    -----------------

    Bring across a netcode_socket_t

    Implement just enough to get my shit done.

    Probably need more address functionality to interface with sockets sendto/recvfrom as well.

    -----------------

    Implement standalone server on localhost port 40000.

    -----------------

    Port across code for matcher. Keep it blocking. Doesn't matter for now.

    -----------------

    Implement client that connects to matcher, gets connect token and connects to server.

    Implement stress that connects 256 clients.

    -----------------

    Write white paper.

    -----------------
