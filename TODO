DONE

    Add the data structure for the per-client payload packet queue. 

    Stick it last in the netcode_server_t.

    When the server receives a payload packet, add that to a queue for that client slot.

    When the server stops, pop all packets off each client packet queue and free them.

    Do the same for the client. It's probably not doing this!

    Yes. It wasn't.

    Implement the code to send and receive payload packets on the server.

    Base this on the code from the client.

    When the server sends a payload packet to a client, if that client is not confirmed yet, send a keep alive first, so a keep-alive packet always precedes payload until confirmation is in.

    This is the smartest way to reduce the connection round trips, and still get the common case being that the server can send payload packets immediately to client, without waiting for confirmation.

    This is good. Lock it in.

TODO

    -----------------

    Extend client_server to test that client and server can exchange payload packets.

    -----------------

    Once client and server are connected and have both exchanged payload packets, disconnect the client server-side.

    -----------------

    Implement replay protection.

    Support 1 second worth of replay protection @ 60HZ, eg. 60 packets per-client.

    Make sure global packets are ignored (eg. high bit set in sequence).

    -----------------










    =============================================================================

    Implement network simulator and shim for packets sent/received from client and server.

    -----------------

    Implement functional tests for client connect connection functionality.

    -----------------

    Bring across matcher in golang and port to binary format connect tokens.

    Integrate mbedtls library.

    Port across code for matcher. Keep it blocking. Doesn't matter for now.

    Convert client to get server info from web server.

    -----------------

    Implement stress that connects 256 clients.

    -----------------

    Write white paper.

    -----------------
