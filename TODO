DONE

    Added code to convert address to string for logging.

    Log port client starts on when it is created.

    Log server address client is connecting.

    Log server address when client connects to next server.

    Port across the simple queue code.

    Port across tests for queue.

    Add packet queue to client. 

    Create and destroy it along with client.

    Add function to send and receive payload packets to/from server.

    Add a function to receive packets from server. Adjust the packet pointer so it is just the payload data.

    Need a function to destroy payload packets received from client, because the pointer will be adjusted.

    Done. The client is finished.

    Stopping work here.

TODO

    -----------------

    Implement the server side of the state machine (up to 256 players, for agar.io)

    Gee this is going to be a lot of work...

    -----------------

    Get client connecting to server.

    -----------------

    Implement network simulator and shim for packets sent/received from client and server.

    -----------------

    Implement replay protection.

    -----------------

    Implement functional tests for client connect connection functionality.

    -----------------

    Bring across matcher in golang and port to binary format connect tokens.

    Integrate mbedtls library.

    Port across code for matcher. Keep it blocking. Doesn't matter for now.

    Convert client to get server info from web server.

    -----------------

    Implement stress that connects 256 clients.

    -----------------

    Write white paper.

    -----------------
