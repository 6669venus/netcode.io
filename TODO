DONE

TODO

    ------------------

    Work out how to get a connect token for client testing generated from C.

    This is important because I want to move forward with the client connect without having to waste time integrating mbedtls.

    Added a test function to do this:

        netcode_generate_connect_data

    The only caveat is that I need to port across code to parse an address from a string, in order to setup the server addresses.

    This is because I don't want to expose internal details to the netcode.h header, such as the netcode_address_t struct.

    ------------------

    Add code to send the other packet types.

    ------------------

    Work out how packets will be sent to the server, and how this will be mocked for testing purposes (eg. through a loopback or simulator, without all the complexity of 'transport' concept).

    I'm thinking a callback function to perform the actual send which by default goes through a socket, but can be overridden to do something else (eg. simulator or pass directly to the server).

    -----------------

    Port across the code to process packets.

    -----------------

    Implement the server side of the state machine (up to 256 players, for agar.io)

    -----------------

    Implement tests to make sure the client/server state machine is working as expected.

    -----------------

    Bring across matcher in golang and port to binary format connect tokens.

    Integrate mbedtls library.

    -----------------

    Bring across a netcode_socket_t

    Implement just enough to get my shit done.

    Probably need more address functionality to interface with sockets sendto/recvfrom as well.

    -----------------

    Implement standalone server on localhost port 40000.

    -----------------

    Port across code for matcher. Keep it blocking. Doesn't matter for now.

    -----------------

    Implement client that connects to matcher, gets connect token and connects to server.

    Implement stress that connects 256 clients.

    -----------------

    Write white paper.

    -----------------
