DONE

    Sketch out the server struct and the server program.

    Create and destroy the server socket, as is done for the client.

    Added separate bind and public addresses for server create. Necessary so we can bind on any address.

    Need to bring across sleep function. platform.h for test programs? 

    Yes. I don't want to duplicate the sleep code across client and server.

    Perhaps just put it in netcode. eg: netcode_sleep instead. Fine.

    Yes. Added netcode_sleep, netcode_time.

    Also bring across the signalling code for server and client, so the client and server can handle ^C and clean up properly (eg. disconnect)

TODO

    Implement code for server to receive and process packets.

    -----------------

    Setup correct allowed packet types for server.

    -----------------

    Verify that server is receiving connection request packets from client when running.

    -----------------

    Work out what I need in the struct allocated per-client slot.

    -----------------

    Work out what arrays I need for fast O(n) lookups for incoming packets (keep them separate). Hot/cold split.

    -----------------

    Get client connecting to server.

    -----------------

    Implement network simulator and shim for packets sent/received from client and server.

    -----------------

    Implement replay protection.

    -----------------

    Implement functional tests for client connect connection functionality.

    -----------------

    Bring across matcher in golang and port to binary format connect tokens.

    Integrate mbedtls library.

    Port across code for matcher. Keep it blocking. Doesn't matter for now.

    Convert client to get server info from web server.

    -----------------

    Implement stress that connects 256 clients.

    -----------------

    Write white paper.

    -----------------
