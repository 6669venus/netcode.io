DONE

    When receiving packets, look up the encryption index by address (common case) for connected clients.

    If the address exists in a connected client slot, use the encryption index from that slot.

TODO
    
    -----------------

    Implement send packets function for server so that it sends a keep alive packet to the client if no packet sent in the last amount of time.

    -----------------

    Add a 'confirmed' flag per-client slot on the server. Clear it to 0 when a client slot is connected.

    Extend the keep alive so it is sent repeatedly, even if other packets are sent from server -> client prior to confirm.

    -----------------

    Implement server-side timeouts.

    -----------------

    When the server receives a payload packet, add that to a queue for that client slot.

    -----------------

    Implement the code to send and receive payload packets.

    -----------------

    Extend client_server to test that client and server can exchange payload packets.

    -----------------

    Implement code on the server-side to disconnect the client.

    -----------------

    Once client and server are connected and have both exchanged payload packets, disconnect the client server-side.

    -----------------

    Implement replay protection.

    Support 1 second worth of replay protection @ 60HZ, eg. 60 packets per-client.

    Make sure global packets are ignored (eg. high bit set in sequence).

    -----------------










    =============================================================================

    Implement network simulator and shim for packets sent/received from client and server.

    -----------------

    Implement functional tests for client connect connection functionality.

    -----------------

    Bring across matcher in golang and port to binary format connect tokens.

    Integrate mbedtls library.

    Port across code for matcher. Keep it blocking. Doesn't matter for now.

    Convert client to get server info from web server.

    -----------------

    Implement stress that connects 256 clients.

    -----------------

    Write white paper.

    -----------------
