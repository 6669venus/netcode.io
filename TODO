DONE

    Implement code for server to receive and process packets.

    Setup correct allowed packet types for server.

    Rename netcode_packet_context_t to netcode_context_t

    Remove the extra stuff from the context leaving only the encryption keys.

    Verify that server is receiving connection request packets from client when running.

    Now, why are the connection request packets being rejected and not turning into full packets for client?

    Not setting the private key properly? Different protocol id?

    Connect token is failing to decrypt. This is annoying. Will be hard to track down...

    What's wrong? Sequence # wrong? Different private key?

TODO


    -----------------
    
    Actually, just passing in context for encryption keys is pointless.

    Just pass in the key directly. Context class may still exist, but it doesn't have to passed in this form to send and receive packet fns.

    -----------------

    Work out what I need in the struct allocated per-client slot.

    -----------------

    Work out what arrays I need for fast O(n) lookups for incoming packets (keep them separate). Hot/cold split.

    -----------------

    Get client connecting to server.

    -----------------

    Implement network simulator and shim for packets sent/received from client and server.

    -----------------

    Implement replay protection.

    -----------------

    Implement functional tests for client connect connection functionality.

    -----------------

    Bring across matcher in golang and port to binary format connect tokens.

    Integrate mbedtls library.

    Port across code for matcher. Keep it blocking. Doesn't matter for now.

    Convert client to get server info from web server.

    -----------------

    Implement stress that connects 256 clients.

    -----------------

    Write white paper.

    -----------------
