DONE

    Bring across implementations for challenge token functions.

    Unit test challenge tokens.

TODO

    Need to write code to encode/decode the sequence into a prefix byte (first bit set, followed by # of sequence bits in low byte).

    This should be pretty easy. All I have to do is scan the sequence from leftmost byte to rightmost byte, and stop when a byte is not zero.

    -----------------

    Implement code to read/write an example challenge packet.

    Use this to get the encrypted packet format working, with sequence # encoded.

    -----------------

    Extend connection request packet read so that it decrypts the connect token.

    This allows for quick reject of connection packets before performing allocation.

    Extend the connection request packet test so that it creates an actual connect token, encrypts it, verifies it is decrypted properly on read.

    -----------------

    Add tests for all the cases that should return NULL on connection request packet

    1. packet too small

    2. timestamp expired

    3. invalid connect token data

    4. timestamp modified from original (eg. AEAD signature early out)

    (there are more conditions now, with the expanded AEAD...)

    -----------------

    Implement read write for one of the other packet types.

    This involves designing the prefix byte, sequence # compression and encrypted data.

    The reader should perform decryption in place, so no allocation is made for a packet that doesn't pass the test. Quick reject is key.

    Once one encrypted packet type is tested working, implement the rest, adding tests for each packet type to make sure they are read/written correctly.

    -----------------
